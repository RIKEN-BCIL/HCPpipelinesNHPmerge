#!/bin/bash
function invert_fsl
{
	echo convert_xfm -omat $2 -inverse $1
	convert_xfm -omat $2 -inverse $1
}
function concat_fsl
{
	echo convert_xfm -omat $3 -concat $2 $1
	convert_xfm -omat $3 -concat $2 $1
}

wd=/media/myelin/brainmappers/Connectome_Project/MishaLongitudinal/hcp
S=HCA6002236
T=HCA6002236_V1_V2
TP1=HCA6002236_V1_MR
TP2=HCA6002236_V2_MR

WMAT1=${S}.long.$T/T1w/$T/mri/transforms/${TP1}_to_${T}.wmat
LTA1=${S}.long.$T/T1w/$T/mri/transforms/${TP1}_to_${T}.lta
LTA1_1=temp/${TP1}_to_${T}_1.lta
MAT1=temp/${TP1}_to_${T}.mat
MAT1_1=temp/${TP1}_to_${T}_1.mat

WMAT2=${S}.long.$T/T1w/$T/mri/transforms/${TP2}_to_${T}.wmat
LTA2=${S}.long.$T/T1w/$T/mri/transforms/${TP2}_to_${T}.lta
LTA2_1=temp/${TP2}_to_${T}_1.lta
MAT2=temp/${TP2}_to_${T}.mat
MAT2_1=temp/${TP2}_to_${T}_1.mat

#S1=$TP1/T1w/$TP1/mri/norm.mgz
S1raw=$TP1/T1w/$TP1/mri/rawavg.mgz
S1raw_nii=$TP1/T1w/$TP1/mri/rawavg.nii.gz
S1=$TP1/T1w/$TP1/mri/orig.mgz
S1nii=$TP1/T1w/$TP1/mri/orig.nii.gz

S1norm=$TP1/T1w/$TP1/mri/norm.mgz
S2norm=$TP2/T1w/$TP2/mri/norm.mgz

S1norm_nii=$TP1/T1w/$TP1/mri/norm.nii.gz
S2norm_nii=$TP2/T1w/$TP2/mri/norm.nii.gz

Tnorm=$S.long.$T/T1w/$T/mri/norm.mgz
Tnorm_nii=$S.long.$T/T1w/$T/mri/norm.nii.gz
Tnorm_template=$S.long.$T/T1w/$T/mri/norm_template.mgz
Tnorm_template_nii=$S.long.$T/T1w/$T/mri/norm_template.nii.gz


#T1=$S.long.$T/T1w/$T/mri/norm_template.mgz
T1=$S.long.$T/T1w/$T/mri/orig.mgz
T1nii=$S.long.$T/T1w/$T/mri/orig.nii.gz

#S2=$TP2/T1w/$TP2/mri/norm.mgz
S2raw=$TP2/T1w/$TP2/mri/rawavg.mgz
S2raw_nii=$TP2/T1w/$TP2/mri/rawavg.nii.gz
S2=$TP2/T1w/$TP2/mri/orig.mgz
S2nii=$TP2/T1w/$TP2/mri/orig.nii.gz


#out1=$wd/temp/TP1_norm_on_template.mgz
out1=$wd/temp/TP1_orig_on_template.mgz
out1nii=$wd/temp/TP1_orig_on_template.nii.gz

#out2=$wd/temp/TP2_norm_on_template.mgz
out2=$wd/temp/TP2_orig_on_template.mgz
out2nii=$wd/temp/TP2_orig_on_template.nii.gz

TP1_T1w=${TP1}/T1w/T1w_acpc_dc_restore.nii.gz
TP2_T1w=${TP2}/T1w/T1w_acpc_dc_restore.nii.gz

Template_lh_orig=${S}.long.$T/T1w/$T/surf/lh.orig

if [ -z "$1" ]; then 
	echo "environment variables set. To execute, speficy an input argument (lta or mat)."
elif [ "$1" == "lta" ]; then #resample orig.mgz(timepoint) to orig_template.mgz(template) using original lta

	echo mri_vol2vol --mov $S1 --lta $LTA1 --targ $T1 --o $out1
	mri_vol2vol --mov $S1 --lta $LTA1 --targ $T1 --o $out1
	echo mri_vol2vol --mov $S2 --lta $LTA2 --targ $T1 --o $out2
	mri_vol2vol --mov $S2 --lta $LTA2 --targ $T1 --o $out2

	echo fsleyes $out1 $out2 $T1
elif [ "$1" == "mat" ]; then #resample orig.nii.gz(timepoint) to orig.nii.gz(template) using .mat compied from original lta
	#echo mri_vol2vol --mov $S1nii --fsl $MAT1 --targ $T1nii --o $out1nii
	#mri_vol2vol --mov $S1nii --fsl $MAT1 --targ $T1nii --o $out1nii
	
	echo flirt -in $S1nii -ref $T1nii -init $MAT1 -applyxfm -out $out1nii
	flirt -in $S1nii -ref $T1nii -init $MAT1 -applyxfm -out $out1nii
	
	#echo mri_vol2vol --mov $S2nii --fsl $MAT2 --targ $T1nii --o $out2nii
	#mri_vol2vol --mov $S2nii --fsl $MAT2 --targ $T1nii --o $out2nii
	
	echo flirt -in $S2nii -ref $T1nii -init $MAT2 -applyxfm -out $out2nii
	flirt -in $S2nii -ref $T1nii -init $MAT2 -applyxfm -out $out2nii

	echo fsleyes $out1nii $out2nii $T1nii
		
elif [ "$1" == "mat1" ]; then #find out the lta transform from timepoint raw and orig spaces. Verify.

	#produce an LTA matrix that does rescaling.
	echo lta_convert --inlta identity.nofile --src $S1raw --trg $S1
	lta_convert --inlta identity.nofile --src $S1raw --trg $S1 --outlta $LTA1_1
	
	#convert this LTA matrix to .mat
	echo lta_convert --inlta $LTA1_1 --outfsl $MAT1_1 --src $S1raw_nii --trg $S1nii
	lta_convert --inlta $LTA1_1 --outfsl $MAT1_1 --src $S1raw_nii --trg $S1nii
	
	
	

	#apply .mat to go from TP's rawavg to orig space. 
	echo mri_vol2vol --mov $S1raw_nii --fsl $MAT1_1 --targ $S1nii --o temp/TP1_raw_on_orig.nii.gz
	mri_vol2vol --mov $S1raw_nii --fsl $MAT1_1 --targ $S1nii --o temp/TP1_raw_on_orig.nii.gz
	echo fsleyes temp/TP1_raw_on_orig.nii.gz $S1nii
	

	#echo lta_convert --inlta identity.nofile --src $S2 --trg $T1
	#lta_convert --inlta identity.nofile --src $S2 --trg $T1 --outlta $LTA2_1
	
	#echo mri_vol2vol --mov $S1raw --lta $LTA1_1 --targ $S1 --o temp/TP1_raw_on_orig.mgz
	#mri_vol2vol --mov $S1raw --lta $LTA1_1 --targ $S1 --o temp/TP1_raw_on_orig.mgz
	
	#echo fsleyes temp/TP1_raw_on_orig.mgz $S1
	
	#echo mri_vol2vol --mov $S2raw --lta $LTA2_1 --targ $S2 --outfile temp/TP1_raw_on_orig.mgz
	#mri_vol2vol --mov $S2raw --lta $LTA2_1 --targ $S2 --outfile temp/TP1_raw_on_orig.mgz

elif [ "$1" == "mat2" ]; then #test the conversion from T1w_acpc_dc to rawavg.nii.gz
	echo $TP1_T1w	
elif [ "$1" == "composite" ]; then #combine transforms to produce timepoint's T1w->HCP average template FSL transform.
	#MUST be run from the top HCP processing dir containing individual timepoint dirs.
	set +x
	#1. create resample transform from timepoints' T1w to 'norm' (equiv. to 'orig') space
	lta_convert --inlta identity.nofile --src $TP1_T1w --trg $S1norm_nii --outlta temp/TP1_T1w_to_TP1_norm.lta
	lta_convert --inlta identity.nofile --src $TP2_T1w --trg $S2norm_nii --outlta temp/TP2_T1w_to_TP2_norm.lta
	
	#2. concatnate previous transform with TP(orig)->template(orig) transform computed by FS.
	mri_concatenate_lta temp/TP1_T1w_to_TP1_norm.lta $LTA1 temp/TP1_T1w_to_template_norm.lta
	mri_concatenate_lta temp/TP2_T1w_to_TP2_norm.lta $LTA2 temp/TP2_T1w_to_template_norm.lta	
	
	#3. Invert TP->norm transforms
	lta_convert --inlta temp/TP1_T1w_to_TP1_norm.lta --outlta temp/TP1_norm_to_TP1_T1w.lta --invert
	lta_convert --inlta temp/TP2_T1w_to_TP2_norm.lta --outlta temp/TP2_norm_to_TP2_T1w.lta --invert
	
	#4. Combine TP->template and orig->TP transforms to get TP->TP(HCP template) transform.
	mri_concatenate_lta temp/TP1_T1w_to_template_norm.lta temp/TP1_norm_to_TP1_T1w.lta temp/TP1_T1w_to_TP1_T1w_template.lta
	mri_concatenate_lta temp/TP2_T1w_to_template_norm.lta temp/TP2_norm_to_TP2_T1w.lta temp/TP2_T1w_to_TP2_T1w_template.lta
	
	#test the output of the final transform.
	#mri_vol2vol --mov $TP1_T1w --lta temp/TP1_T1w_to_TP1_T1w_template.lta --targ $TP1_T1w --o temp/TP1_T1w_on_TP1_T1w_templ.nii.gz
	#mri_vol2vol --mov $TP2_T1w --lta temp/TP2_T1w_to_TP2_T1w_template.lta --targ $TP2_T1w --o temp/TP2_T1w_on_TP2_T1w_templ.nii.gz
	#fsleyes temp/TP1_T1w_on_TP1_T1w_templ.nii.gz temp/TP2_T1w_on_TP2_T1w_templ.nii.gz
	
	#5. convert the final TP_T1w->TP_T1w(HCP template) LTA transform to .mat(FSL).
	lta_convert --inlta temp/TP1_T1w_to_TP1_T1w_template.lta --src $TP1_T1w --trg $TP1_T1w --outfsl temp/TP1_T1w_to_TP1_T1w_template.mat
	lta_convert --inlta temp/TP2_T1w_to_TP2_T1w_template.lta --src $TP2_T1w --trg $TP2_T1w --outfsl temp/TP2_T1w_to_TP2_T1w_template.mat
	
	#6. Resample the timepoint's T1w to HCP template space. 
	#rewrite using applywarp --interp=spline -i <input> -r <ref> --premat=<fsl mat> -o <output>
	mri_vol2vol --mov $TP1_T1w --targ $TP1_T1w --fsl temp/TP1_T1w_to_TP1_T1w_template.mat --o temp/TP1_T1w_on_TP1_T1w_templ_fsl.nii.gz
	mri_vol2vol --mov $TP2_T1w --targ $TP2_T1w --fsl temp/TP2_T1w_to_TP2_T1w_template.mat --o temp/TP2_T1w_on_TP2_T1w_templ_fsl.nii.gz
	echo fsleyes TP1_T1w_on_TP1_T1w_templ.nii.gz TP2_T1w_on_TP2_T1w_templ.nii.gz TP2_T1w_on_TP2_T1w_templ_fsl.nii.gz TP1_T1w_on_TP1_T1w_templ_fsl.nii.gz
	set -x
elif [ "$1" == "surf" ]; then
	#resample surfaces using previously computed transforms.
	echo 1
fi
